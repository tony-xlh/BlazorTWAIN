@page "/upload"
@using System.IO
@using BlazorTWAIN.Shared
@inject HttpClient Http
@inject NavigationManager Navigator

<InputFile OnChange="LoadImage" />

@if (imageDataUri is not null)
{
    <hr>
    <label>Client-Side</label>
    <img src="@imageDataUri" />
    <hr>
}

@if (loading)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (@barcodeResults is not null)
    {
        <hr>
        <label>Results:</label>
        <ol class="list-group">
            @foreach (TextResult result in @barcodeResults)
            {
                <li class="list-group-item">@result.text</li>
            }
        </ol>
    }
}

@code {
    string imageDataUri;
    List<TextResult> barcodeResults;
    Boolean loading;

    async Task LoadImage(InputFileChangeEventArgs e)
    {
        loading = true;
        long maxFileSize = 1024 * 1024 * 15;

        // On Client e.File is a IBrowserFile
        // Read Data
        var imageFile = await e.File.RequestImageFileAsync("image/jpeg", maxWith: 640, maxHeight: 480);
        using Stream fileStream = imageFile.OpenReadStream(maxFileSize);
        using MemoryStream ms = new();

        await fileStream.CopyToAsync(ms);
        byte[] fileBytes = ms.ToArray();

        // Display Data as data:uri
        string base64 = Convert.ToBase64String(fileBytes);
        imageDataUri = $"data:image/jpeg;base64,{base64}";
        using var content = new MultipartFormDataContent();
        content.Add(
            content: new ByteArrayContent(fileBytes),
            name: "\"file\"", // name must match the endpoint's parameter name
            fileName: e.File.Name
            );

        HttpResponseMessage response = await Http.PostAsync("api/ReadBarcodes", content);
        loading = false;
        // Was the post a success?
        response.EnsureSuccessStatusCode();

        // Where was the resource saved?        
        string jsonString = await response.Content.ReadAsStringAsync();
        barcodeResults = System.Text.Json.JsonSerializer.Deserialize<List<TextResult>>(jsonString);
    }

}